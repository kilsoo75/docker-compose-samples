version: '3'
services:
  redis-master:
    image: kilsoo75/redis-master
    deploy:
      restart_policy:
        condition: none
    networks:
      - webnet
  redis-slave:
    image: kilsoo75/redis-slave
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
    depends_on:
      - redis-master
    networks:
      - webnet
  redis-sentinel:
    image: kilsoo75/redis-sentinel
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
    depends_on:
      - redis-master
      - redis-slave
    networks:
      - webnet
  redis-haproxy:
    image: kilsoo75/haproxy-redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - redis-master
      - redis-slave
    networks:
      - webnet
  cloud-biz-frontend:
    image: kilsoo75/cloud-movie
    ports:
      - "8080:8080"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    depends_on:
      - redis-master
      - redis-slave
      - redis-sentinel
      - redis-haproxy
    networks:
      - webnet
#  visualizer:
#    image: dockersamples/visualizer:stable
#    ports:
#      - "8090:8090"
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock"
#    deploy:
#      placement:
#        constraints: [node.role == manager]
#    depends_on:
#      - redis-master
#      - redis-slave
#    networks:
#      - webnet
#  portainer:
#    image: portainer/portainer
#    ports:
#      - "9000:9000"
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock"
#      - "/opt/portainer:/data"
#    deploy:
#      placement:
#        constraints: [node.role == manager]    
networks:
  webnet:
